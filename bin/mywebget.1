.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MYWEBGET 1"
.TH MYWEBGET 1 "2003-06-08" "perl v5.8.0" "Perl mywebget URL fetch utility"
.SH "NAME"
mywebget.pl \- Perl Web URL fetch program
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&    mywebget.pl http://example.com/ [URL ...]
\&    mywebget.pl --config $HOME/config/mywebget.conf --Tag linux --Tag emacs ..
\&    mywebget.pl --verbose --overwrite http://example.com/
\&    mywebget.pl --verbose --overwrite --Output ~/dir/ http://example.com/
\&    mywebget.pl --new --overwrite http://example.com/kit-1.1.tar.gz
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
.Sh "General options"
.IX Subsection "General options"
.IP "\fB\-\-Create\-paths \-C\fR" 4
.IX Item "--Create-paths -C"
Create paths that do not exist in \f(CW\*(C`lcd:\*(C'\fR directives.
.Sp
By default, any \s-1LCD\s0 directive to non-existing directory will interrupt
program. With this option, local directories are created as needed making
it possible to re-create the exact structure as it is in configuration
file.
.IP "\fB\-\-config \s-1FILE\s0\fR" 4
.IX Item "--config FILE"
This option can be given multiple times. All configurations are read.
.Sp
Read URLs from configuration file. If no configuration file is given, file
pointed by environment variable is read. See \s-1ENVIRONMENT\s0.
.Sp
The configuration file layout is envlained in section \s-1CONFIGURATION\s0 \s-1FILE\s0
.IP "\fB\-\-chdir \s-1DIRECTORY\s0\fR" 4
.IX Item "--chdir DIRECTORY"
Do a \fIchdir()\fR to \s-1DIRECTORY\s0 before any \s-1URL\s0 download starts. This is
like doing:
.Sp
.Vb 2
\&    % cd DIRECTORY
\&    % mywebget.pl http://example.com/index.html
.Ve
.IP "\fB\-\-extract \-e\fR" 4
.IX Item "--extract -e"
Unpack any files after retrieving them. The command to unpack typical
archive files are defined in a program. Make sure these programs are
along path. Win32 users are encouraged to install the Cygwin utilities
where these programs come standard. Refer to section \s-1SEE\s0 \s-1ALSO\s0.
.Sp
.Vb 5
\&  .tar => tar
\&  .tgz => tar + gzip
\&  .gz  => gzip
\&  .bz2 => bzip2
\&  .zip => unzip
.Ve
.IP "\fB\-\-Firewall \s-1FIREWALL\s0\fR" 4
.IX Item "--Firewall FIREWALL"
Use \s-1FIREWALL\s0 when accessing files via ftp:// protocol.
.IP "\fB\-\-new \-n\fR" 4
.IX Item "--new -n"
Get newest file. This applies to datafiles, which do not have extension
\&.asp or .html. When new releases are announced, the version
number in filename usually tells which is the current one so getting
harcoded file with:
.Sp
.Vb 1
\&    mywebget.pl -o -v http://example.com/dir/program-1.3.tar.gz
.Ve
.Sp
is not usually practical from automation point of view. Adding \fB\-\-new\fR
option to the command line causes double pass: a) the whole
http://example.com/dir/ is examined for all files. b) files matching
approximately filename program\-1.3.tar.gz are examined, heuristically
sorted and file with latest version number is retrieved.
.IP "\fB\-\-no\-lcd\fR" 4
.IX Item "--no-lcd"
Ignore \f(CW\*(C`lcd:\*(C'\fR directives in configuration file.
.Sp
In the configuration file, any \f(CW\*(C`lcd:\*(C'\fR directives are obeyed as they are seen.
But if you do want to retrieve \s-1URL\s0 to your current directory, be sure to
supply this option. Otherwise the file will end to the directory pointer by
\&\f(CW\*(C`lcd:\*(C'\fR.
.IP "\fB\-\-no\-save\fR" 4
.IX Item "--no-save"
Ignore \f(CW\*(C`save:\*(C'\fR directives in configuration file. If the URLs have
\&\f(CW\*(C`save:\*(C'\fR options, they are ignored during fetch. You usually want to
combine \fB\-\-no\-lcd\fR with \fB\-\-no\-save\fR
.IP "\fB\-\-no\-extract\fR" 4
.IX Item "--no-extract"
Ignore \f(CW\*(C`x:\*(C'\fR directives in configuration file.
.IP "\fB\-\-Output \s-1DIR\s0\fR" 4
.IX Item "--Output DIR"
Before retrieving any files, chdir to \s-1DIR\s0.
.IP "\fB\-\-overwrite \-o\fR" 4
.IX Item "--overwrite -o"
Allow overwriting existing files when retrieving URLs.
Combine this with \fB\-\-skip\-version\fR if you periodically update files.
.IP "\fB\-\-Proxy \s-1PROXY\s0\fR" 4
.IX Item "--Proxy PROXY"
Use \s-1PROXY\s0 server for \s-1HTTP\s0. (See \fB\-\-Firewall\fR for \s-1FTP\s0.). The port number is
optional in the call:
.Sp
.Vb 4
\&    --Proxy this.proxy.com:8080
\&    --Proxy http://this.proxy.com:8080/
\&    --Proxy this.proxy.com
\&    --Proxy http://this.proxy.com/
.Ve
.IP "\fB\-\-prefix \s-1PREFIX\s0\fR" 4
.IX Item "--prefix PREFIX"
Add \s-1PREFIX\s0 to all retrieved files.
.IP "\fB\-\-Postfix \s-1POSTFIX\s0 \fR" 4
.IX Item "--Postfix POSTFIX "
Add \s-1POSTFIX\s0 to all retrieved files.
.IP "\fB\-\-prefix\-date \-D\fR" 4
.IX Item "--prefix-date -D"
Add iso8601 \*(L":YYYY\-MM\-DD\*(R" prefix to all retrived files.
This is added before possible \fB\-\-prefix\-www\fR or \fB\-\-prefix\fR.
.IP "\fB\-\-prefix\-www \-W\fR" 4
.IX Item "--prefix-www -W"
Usually the files are stored with the same name as in the \s-1URL\s0 dir, but
if you retrieve files that have identical names you can store each
page separately so that the file name is prefixed by the site name.
.Sp
.Vb 2
\&    http://example.com/page.html    --> example.com::page.html
\&    http://example2.com/page.html   --> example2.com::page.html
.Ve
.IP "\fB\-\-regexp \-r \s-1REGEXP\s0\fR" 4
.IX Item "--regexp -r REGEXP"
Retrieve URLs matching \s-1REGEXP\s0 from your \f(CW\*(C`configuration\*(C'\fR file. This cancels
\&\fB\-\-Tag\fR options in the command line.
.IP "\fB\-\-Regexp \-R \s-1REGEXP\s0\fR" 4
.IX Item "--Regexp -R REGEXP"
Retrieve file matching at the destination \s-1URL\s0 site. This is like \*(L"Connect
to the \s-1URL\s0 and get all files matching \s-1REGEXP\s0\*(R". Here all gzip compressed
files are found form \s-1HTTP\s0 server directory:
.Sp
.Vb 1
\&    mywebget.pl -v -R "\e.gz" http://example.com/archive/
.Ve
.IP "\fB\-\-Regexp\-content \-A \s-1REGEXP\s0\fR" 4
.IX Item "--Regexp-content -A REGEXP"
Analyze the content of the file matching the \s-1REGEXP\s0. Only it that matches
accept the download. This option will slown download, because the file
is read into memory as a single line and then a match is searched from
the content.
.Sp
For example to download Emacs lisp file (.el) written by Mr. Foo.
The case is ignored during match:
.Sp
.Vb 2
\&    mywebget.pl -v -R "\e.el$" -A "(?i)Author: Mr. Foo" \e
\&      http://www.emacswiki.org/elisp/index.html
.Ve
.IP "\fB\-\-stdout\fR" 4
.IX Item "--stdout"
Retrieve \s-1URL\s0 and write it to stdout.
.IP "\fB\-\-skip\-version\fR" 4
.IX Item "--skip-version"
Do not download files that have version number and which already exists on
disk. Suppose you have these files and you use option \fB\-\-skip\-version\fR:
.Sp
.Vb 2
\&    kit.tar.gz
\&    file-1.1.tar.gz
.Ve
.Sp
Only file.txt is retrieved, because file\-1.1.tar.gz contains version number
and the file has not changed since last retrieval. The idea is, that in
every release the number in in distribution increases, but there may be
distributions which do not contain version number. In regular intervals
you may want to load those kits again, but skip versioned files. In short:
This option does not make much sense without additional option \fB\-\-new\fR
.Sp
If you want to reload versioned file again, add option \fB\-\-overwrite\fR.
.IP "\fB\-\-Tag \-T \s-1NAME\s0 [\s-1NAME\s0] ...\fR" 4
.IX Item "--Tag -T NAME [NAME] ..."
Search tag \s-1NAME\s0 from the config file and download only entries defined
under that tag. Refer to \fB\-\-config \s-1FILE\s0\fR option description. You can give
Multiple \fB\-\-Tag\fR switches. Combining this option with \fB\-\-regexp\fR
does not make sense and the concequencies are undefined.
.Sh "Miscellaneous options"
.IX Subsection "Miscellaneous options"
.IP "\fB\-\-debug \-d [\s-1LEVEL\s0]\fR" 4
.IX Item "--debug -d [LEVEL]"
Turn on debug with positive \s-1LEVEL\s0 number. Zero means no debug.
This option turns on \fB\-\-verbose\fR too.
.IP "\fB\-\-help \-h\fR" 4
.IX Item "--help -h"
Print help page in text.
.IP "\fB\-\-help\-html\fR" 4
.IX Item "--help-html"
Print help page in \s-1HTML\s0.
.IP "\fB\-\-help\-man\fR" 4
.IX Item "--help-man"
Print help page in Unix manual page format. You want to feed this output to
c<nroff \-man> in order to read it.
.Sp
Print help page.
.IP "\fB\-\-selftest\fR" 4
.IX Item "--selftest"
Run some internal tests. For maintainer or developer only.
.IP "\fB\-\-test \-t\fR" 4
.IX Item "--test -t"
Run in test mode.
.IP "\fB\-\-verbose \-v [\s-1NUMBER\s0]\fR" 4
.IX Item "--verbose -v [NUMBER]"
Print verbose messages.
.IP "\fB\-\-Version \-V\fR" 4
.IX Item "--Version -V"
Print version information.
.SH "README"
.IX Header "README"
Automate periodic downloads of released files and packages.
.Sh "Wget and this program"
.IX Subsection "Wget and this program"
At this point you may wonder, where would you need this perl program when
\&\fIwget\fR\|(1) C\-program has been the standard for ages. Well, 1) Perl is cross
platform and more easily extendable 2) You can put file download criterias
to configuration file and use perl regular epxressions 3) the program can
anlyze web-pages and \*(L"search\*(R" for the download link as you instruct 4) it
contains heuristics to track more newer version of the file.
.PP
But it does not replace \fImywebget\fR\|(1) because this program does not offer
as many options as web get, not even recursive downloads. The best advice
is to dedicate this program to \*(L"batch\*(R" download the files that you monitor
most of the time and use \fIwget\fR\|(1) for everything else.
.Sh "Short introduction"
.IX Subsection "Short introduction"
This small utility makes it possible to keep a list of URLs in a
configuration file and periodically retrieve those pages or files with
simple commands. This utility is best suited for small batch jobs to
download e.g. most recent versions of software files. If you use an \s-1URL\s0
that is already on disk, be sure to supply option \fB\-\-overwrite\fR to allow
overwriting existing files.
.PP
While you can run this program from command line to retrieve individual
files, program has been designed to use separate configuration file via
\&\fB\-\-config\fR option. In the configuration file you can control the
downloading with separate directives like \f(CW\*(C`save:\*(C'\fR which tells to save the
file under different name.
.PP
The simplest way to retreive the latest version of a kit from \s-1FTP\s0 site is:
.PP
.Vb 2
\&    mywebget.pl --new --overwite --verbose \e
\&       http://www.example.com/kit-1.00.tar.gz
.Ve
.PP
Do not worry about the filename \*(L"kit\-1.00.tar.gz\*(R". The latest version, say,
kit\-3.08.tar.gz will be retrieved. The option \fB\-\-new\fR instructs to find
newer version than the provided \s-1URL\s0.
.PP
If the \s-1URL\s0 ends to slash, then directory list at the remote machine
is stored to file:
.PP
.Vb 1
\&    !path!000root-file
.Ve
.PP
The content of this file can be either index.html or the directory listing
depending on the used http or ftp protocol.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Get file(s) from site:
.PP
.Vb 1
\&    mywebget.pl http://www.example.com/dir/package.tar.gz ..
.Ve
.PP
Get all mailing list archive files that match \*(L"gz\*(R":
.PP
.Vb 1
\&    mywebget.pl -R gz  http://somewhere.at/mailing-list/archive/download/
.Ve
.PP
Read a directory and store it to filename \s-1YYYY\-MM\-DD::\s0!dir!000root\-file.
.PP
.Vb 1
\&    mywebget.pl --prefix-date --overwrite --verbose http://www.example.com/dir/
.Ve
.PP
To update newest version of the kit, but only if there is none in the
disk already. The \-\-new option instructs to find nwer packages and
the filename is used only for guidance how the file looks like:
.PP
.Vb 2
\&    mywebget.pl --overwrite --skip-version --new --verbose \e
\&        ftp://ftp.example.com/dir/packet-1.23.tar.gz
.Ve
.PP
To overwrite file and add a date prefix to the file name:
.PP
.Vb 2
\&    mywebget.pl --prefix-date --overwrite --verbose \e
\&       http://www.example.com/file.pl
.Ve
.PP
.Vb 1
\&    --> YYYY-MM-DD::file.pl
.Ve
.PP
To add date and \s-1WWW\s0 site prefix to the filenames:
.PP
.Vb 2
\&    mywebget.pl --prefix-date --prefix-www --overwrite --verbose \e
\&       http://www.example.com/file.pl
.Ve
.PP
.Vb 1
\&    --> YYYY-MM-DD::www.example.com::file.pl
.Ve
.PP
Get all updated files under \s-1KITS\s0 and use default configuration file:
.PP
.Vb 2
\&    mywebget.pl --verbose --overwrite --skip-version --new --Tag kits
\&    mywebget.pl -v -o -s -n -T kits
.Ve
.PP
Get files as they read in the configuration file to the current directory,
ignoring any \f(CW\*(C`lcd:\*(C'\fR and \f(CW\*(C`save:\*(C'\fR directives:
.PP
.Vb 3
\&    mywebget.pl --config $HOME/config/mywebget.conf /
\&        --no-lcd --no-save --overwrite --verbose \e
\&        http://www.example.com/file.pl
.Ve
.PP
To check if \f(CW\*(C`lcd:\*(C'\fR directives refer to live directories on disk, run the
program with non-matching regexp and it parses the file and checks the
lcds along the way:
.PP
.Vb 1
\&    mywebget.pl -v -r dummy-regexp
.Ve
.PP
.Vb 1
\&    -->
.Ve
.PP
.Vb 2
\&    mywebget.pl.DirectiveLcd: LCD [$EUSR/directory ...]
\&    is not a directory at /users/foo/bin/mywebget.pl line 889.
.Ve
.SH "CONFIGURATION FILE"
.IX Header "CONFIGURATION FILE"
.Sh "Comments"
.IX Subsection "Comments"
The configuration file is \s-1NOT\s0 Perl code. Comments start with hash character
(#).
.Sh "Variables"
.IX Subsection "Variables"
At this point, variable expansions happen only in \fBlcd:\fR. Do not try
to use them anywhere else, like in URLs.
.PP
Path variables for \fBlcd:\fR are defined using following notation, spaces are
not allowed in \s-1VALUE\s0 part (no directory names with spaces). Varaible names
are case sensitive. Variables substitute environment varaibales with the
same name. Environment variables are immediately available.
.PP
.Vb 3
\&    VARIABLE = /home/my/dir         # define variable
\&    VARIABLE = $dir/some/file       # Use previously defined variable
\&    FTP      = $HOME/ftp            # Use environment variable
.Ve
.PP
The right hand can refer to previously defined variables or existing
environment variables. Repeat, this is not Perl code although it may
look like one, but just an allowed syntax in the configuration file. Notice
that there is dollar to the right hand> when variable is referred, but no
dollar to the left hand side when variable is defined. Here is example
of a possible configuration file contant. The tags are hierarchically
ordered without a limit.
.PP
Warning: remember to use different variables names in separate
include files. All variables are global.
.Sh "Include files"
.IX Subsection "Include files"
It is possible to include more configuration files with statement
.PP
.Vb 1
\&    INCLUDE <path-to-file-name>
.Ve
.PP
Variable expansions are possible in the file name. There is no limit how
many or how deep include structure is used. Every file is included only
once, so it is safe to to have multiple includes to the same file.
Every include is read, so put the most importat override includes last:
.PP
.Vb 2
\&    INCLUDE <etc/mywebget.conf>             # Global
\&    INCLUDE <$HOME/config/mywebget.conf>    # HOME overrides it
.Ve
.PP
A special \f(CW\*(C`THIS\*(C'\fR tag means relative path of the current include file,
which makes it possible to include several files form the same
directory where a initial include file resides
.PP
.Vb 1
\&    # Start of config at /etc/mywebget.conf
.Ve
.PP
.Vb 2
\&    # THIS = /etc, current location
\&    include <THIS/mywebget-others.conf>
.Ve
.PP
.Vb 2
\&    # Refers to directory where current user is: the pwd
\&    include <mywebget-others.conf>>
.Ve
.PP
.Vb 1
\&    # end
.Ve
.Sh "Configuraton file example"
.IX Subsection "Configuraton file example"
The configuration file can contain many <directoves:>, where
each directive end to a colon. The usage of each directory is best explained
by examining the configuration file below and reading the commentary
near each directive.
.PP
.Vb 1
\&    #   $HOME/config/mywebget.conf F- Perl mywebget.pl configuration file
.Ve
.PP
.Vb 4
\&    ROOT   = $HOME                      F# define variables
\&    CONF   = $HOME/config
\&    UPDATE = $ROOT/updates
\&    DOWNL  = $ROOT/download
.Ve
.PP
.Vb 4
\&    #   Include more configuration files. It is possible to
\&    #   split a huge file in pieces and have "linux",
\&    #   "win32", "debian", "emacs" configurations in separate
\&    #   and manageable files.
.Ve
.PP
.Vb 2
\&    INCLUDE <$CONF/mywebget-other.conf>
\&    INCLUDE <$CONF/mywebget-more.conf>
.Ve
.PP
.Vb 1
\&    tag1: local-copies tag1: local      # multiple names to this category
.Ve
.PP
.Vb 1
\&        lcd:  $UPDATE                   # chdir directive
.Ve
.PP
.Vb 2
\&        #  all "print:" directives are shown to user if --verbose is on
\&        print: Notice, this site moved 2002.03-24, update your bookmarks
.Ve
.PP
.Vb 1
\&        file://absolute/dir/file-1.23.tar.gz
.Ve
.PP
.Vb 1
\&    tag1: external
.Ve
.PP
.Vb 1
\&      lcd:  $DOWNL
.Ve
.PP
.Vb 1
\&      tag2: external-http
.Ve
.PP
.Vb 2
\&        http://www.example.com/page.html
\&        http://www.example.com/page.html save:/dir/dir/page.html
.Ve
.PP
.Vb 1
\&      tag2: external-ftp
.Ve
.PP
.Vb 1
\&        ftp://ftp.com/dir/file.txt.gz save:xx-file.txt.gz login:foo pass:passwd x:
.Ve
.PP
.Vb 1
\&        lcd: $HOME/download-kit
.Ve
.PP
.Vb 1
\&        ftp://ftp.com/dir/kit-1.1.tar.gz new:
.Ve
.PP
.Vb 1
\&      tag2: package-x
.Ve
.PP
.Vb 1
\&        lcd: $DOWNL/package-x
.Ve
.PP
.Vb 3
\&        #  Person announces new files in his homepage, download all
\&        #  announced files. Unpack everything (x:) and remove any
\&        #  existing directories (xopt:rm)
.Ve
.PP
.Vb 1
\&        http://some.com/~foo pregexp:\e.tar\e.gz$ x: xopt:rm
.Ve
.PP
.Vb 1
\&    # End of configuration file mywebget.conf
.Ve
.SH "LIST OF DIRECTIVES IN CONFIGURATION FILE"
.IX Header "LIST OF DIRECTIVES IN CONFIGURATION FILE"
All the directives must in the same line where the \s-1URL\s0 is. The programs
scans lines and determines all options given in line for the \s-1URL\s0.
Directives can be overriden by command line options.
.IP "\fBcnv:CONVERSION\fR" 4
.IX Item "cnv:CONVERSION"
Currently only \fBconv:text\fR is available.
.Sp
Convert downloaded page to text. This option always needs either
\&\fBsave:\fR or \fBrename:\fR, because only those change the filename. Here is an
example:
.Sp
.Vb 2
\&    http://example.com/dir/file.html cnv:text save:file.txt
\&    http://example.com/dir/ pregexp:\e.html cnv:text rename:s/html/txt/
.Ve
.Sp
A \fBtext:\fR shorthand directive can be used instead of \fBcnv:text\fR.
.IP "\fBcregexp:REGEXP\fR" 4
.IX Item "cregexp:REGEXP"
Download file only if the content matches \s-1REGEXP\s0. This is same as option
\&\fB\-\-Regexp\-content\fR. In this example directory listing Emacs lisp packages
(.el) are downloaded but only if their content indicates that the Author is
Mr. Foo:
.Sp
.Vb 1
\&    http://example.com/index.html cregexp:(?i)author:.*Foo pregexp:\e.el$
.Ve
.IP "\fBlcd:DIRECTORY\fR" 4
.IX Item "lcd:DIRECTORY"
Set local download directory to \s-1DIRECTORY\s0 (chdir to it). Any environment
variables are substituted in path name. If this tag is found, it replaces
setting of \fB\-\-Output\fR. If path is not a directory, terminate with error.
See also \fB\-\-Create\-paths\fR and \fB\-\-no\-lcd\fR.
.IP "\fBlogin:LOGIN\-NAME\fR" 4
.IX Item "login:LOGIN-NAME"
Ftp login name. Default value is \*(L"anonymous\*(R".
.IP "\fBnew:\fR" 4
.IX Item "new:"
Get newest file. This variable is reset to the value of \fB\-\-new\fR after the
line has been processed. Newest means, that an \fIls()\fR command is run in the
ftp, and something equivalent in \s-1HTTP\s0 \*(L"ftp directories\*(R", and any files that
resemble the filename is examined, sorted and heurestically determined
according to version number of file which one is the latest. For example
files that have version information in \s-1YYYYMMDD\s0 format will most likely to
be retrieved right.
.Sp
Time stamps of the files are not checked.
.Sp
The only requirement is that filename \f(CW\*(C`must\*(C'\fR follow the universal version
numbering standard for released kits:
.Sp
.Vb 1
\&    FILE-VERSION.extension      # de facto VERSION is defined as [\ed.]+
.Ve
.Sp
.Vb 3
\&    file-19990101.tar.gz        # ok
\&    file-1999.0101.tar.gz       # ok
\&    file-1.2.3.5.tar.gz         # ok
.Ve
.Sp
.Vb 2
\&    file1234.txt                # not recognized. Must have "-"
\&    file-0.23d.tar.gz           # warning ! No letters allowed 0.23d
.Ve
.Sp
Files that have some alphabetic version indicator at the end of \s-1VERSION\s0
are not handled correctly. Bitch the developer and persuade him to stick
to the de facto standard so that files can be retrieved intelligently.
.IP "\fBoverwrite:\fR \fBo:\fR" 4
.IX Item "overwrite: o:"
Same as turning on \fB\-\-overwrite\fR
.IP "\fBpage:\fR" 4
.IX Item "page:"
Download the \s-1HTTP\s0 page or apply command to it. A simple example, the
contact page name \*(L"index.html\*(R", \*(L"welcome.html\*(R" etc. is not known:
.Sp
.Vb 1
\&   http://some.com/~foo page: save:foo-homepage.html
.Ve
.Sp
\&\f(CW\*(C`More about\*(C'\fR \fBpage:\fR \f(CW\*(C`directive and downloading difficult packages\*(C'\fR
.RS 4
.Sp
.RS 4
\&\fB\s-1REMEMBER:\s0 All the regular epxression used in the configuration file have
a limitation of keeping together. This means that there must be no space
characters in the regular expressions, because it will terminate reading
the item.\fR Like if you write pregexp:(this regexp ) => it must be written
pregexp:(this\es+regexp\es)
.RE
.RE
.RS 4
.Sp
Read the \s-1HTTP\s0 url page \*(L"as is\*(R" and parse page content. You need this
directive if the archive is not stored in \s-1HTTP\s0 server directory (similar
to ftp dir), but the maintainer has set up a separate \s-1HTML\s0 page where the
details how to get archive is explained.
.Sp
In order to find the information from the page, you must also supply
some other directives to guide searching and constructing
the correct file name:
.Sp
1) A page regexp directive \f(CW\*(C`pregexp:ARCHIVE\-REGEXP\*(C'\fR matches the A \s-1HREF\s0
filename location in the page.
.Sp
2) Directive \f(CW\*(C`file:DOWNLOAD\-FILE\*(C'\fR tells what is the template to use to
construct the downloadable file (for the \f(CW\*(C`new:\*(C'\fR directive).
.Sp
3) Directive \f(CW\*(C`vregexp:VERSION\-REGEXP\*(C'\fR matches the exact location
in the page from where the version information is extracted. The default
regexp looks for line that says \*(L"The latest version ...is.. 1.4.2\*(R". The
regexp must return submatch 2 for the version number.
.Sp
To put all together, an example shows more this in action. The following
example should all be \s-1PUT\s0 \s-1ON\s0 \s-1ONE\s0 \s-1LINE\s0, while it has been splitted to
separate lines for legibility. The presented configuration line is
explaind in next paragraphs.
.Sp
.RS 4
Contact absolute \fBpage:\fR at http://www.example.com/package.html and
search A \s-1HREF\s0 urls in the page that match \fBpregexp:\fR. In addition, do
another scan and search the version number in the page from thw
position that match \fBvregexp:\fR (submatch 2).
.Sp
After all the pieces have been found, use template \fBfile:\fR to
make the retrievable file using the version number found from
\&\fBvregexp:\fR. The actual download location is combination of
\&\fBpage:\fR and A \s-1HREF\s0 \fBpregexp:\fR location. Here is the whole \*(L"one line\*(R"
definition in the configuration file:
.RE
.RE
.RS 4
.Sp
.Vb 7
\&    http://www.example.com/~foo/package.html
\&    page:
\&    pregexp: package.tar.gz
\&    vregexp: ((?i)latest.*?version.*?\eb([\ed][\ed.]+).*)
\&    file: package-1.3.tar.gz
\&    new:
\&    x:
.Ve
.Sp
Still not clear? Let's throw in a complete \s-1HTML\s0 page where the above would
apply
.Sp
.Vb 2
\&    <HTML>
\&    <BODY>
.Ve
.Sp
.Vb 2
\&    The latest version of package is <B>2.4.1</B> It can be
\&    downloaded in several forms:
.Ve
.Sp
.Vb 2
\&        <A HREF="download/files/package.tar.gz">Tar file</A>
\&        <A HREF="download/files/package.zip">ZIP file
.Ve
.Sp
.Vb 2
\&    </BODY>
\&    </HTML>
.Ve
.Sp
For this example it is assumed that package.tar.gz is actually a symbolic
link to the latest standard release file package\-2.4.1.tar.gz. From this
page the actual download location would have been
http://www.example.com/~foo/download/files/package\-2.4.1.tar.gz So why not
simply download package.tar.gz? Because then the program can't decide if
the version at the page is newer than one stored on disk from the previous
download. With version numbers in the file names, it can.
.Sp
\&\s-1ANOTHER\s0 \s-1EXAMPLE\s0
.Sp
It is possible to add \fBrename:\fR directive to change the final name
of the saved file to the above cases. Sometimes people put version number
to \*(L"plain\*(R" files, that are not archives, like
.Sp
.Vb 2
\&    file.el-1.1
\&    file.el-1.2
.Ve
.Sp
the .el files are Emacs editor packages files and it would be very
inconvenient for Emacs users to refer to those with any other name than
plain \*(L"file.el\*(R". To write a complete line to find such files from
a page and save them in plain name, see below. Lines have been broken
again for legibility:
.Sp
.Vb 7
\&    http://example.com/files/
\&    page:
\&    pregexp:\e.el-\ed
\&    vregexp:(file.el-([\ed.]+))
\&    file:file.el-1.1
\&    new:
\&    rename:s/-[\ed.]+//
.Ve
.Sp
It effectively says \*(L"See if there is new version of something that
looks like file.el\-1.1 and save it under name file.el by deleting the extra
version number at the end of original filename\*(R".
.RE
.IP "\fBpage:find\fR" 4
.IX Item "page:find"
\&\s-1THIS\s0 \s-1IS\s0 \s-1NOT\s0 \s-1FOR\s0 \s-1FTP\s0 directories. Use directive \fBregexp:\fR for \s-1FTP\s0.
.Sp
This is more general instruction than the \fBpage:\fR and \fBvregexp:\fR
explained above.
.Sp
Instruct to download every \s-1URL\s0 on \s-1HTML\s0 page matching \fBpregexp:RE\fR. In
typical situation the page maintainer lists his software in the development
page. This example would download every tar.gz file mentined in a page.
Note, that the \s-1REGEXP\s0 is matched against the A \s-1HREF\s0 link content, not
the actual text that you see on the page:
.Sp
.Vb 1
\&    http://www.example.com/index.html page:find pregexp:\e.tar.gz$
.Ve
.Sp
You can also use additional \fBregexp\-no:\fR directive if you want to exclude
files after the \fBpregexp:\fR has matched a link.
.Sp
.Vb 1
\&    http://www.example.com/index.html page:find pregexp:\e.tar.gz$ regexp-no:this-packet
.Ve
.IP "\fBpass:PASSWORD\fR" 4
.IX Item "pass:PASSWORD"
For \s-1FTP\s0 logins. Default value is \f(CW\*(C`nobody@example.com\*(C'\fR.
.IP "\fBprint:MESSAGE\fR" 4
.IX Item "print:MESSAGE"
Print associated message to user requesting matching tag name.
This directive must in separate line inside tag.
.Sp
.Vb 1
\&    tag1: linux
.Ve
.Sp
.Vb 2
\&      print: this download site moved 2002-02-02, check your bookmarks.
\&      http://new.site.com/dir/file-1.1.tar.gz new:
.Ve
.Sp
The \f(CW\*(C`print:\*(C'\fR directive for tag is shown only if user turns on \-\-verbose
mode:
.Sp
.Vb 1
\&    mywebget.pl -v -T linux
.Ve
.IP "\fBrename:PERL\-CODE\fR" 4
.IX Item "rename:PERL-CODE"
Rename each file using \s-1PERL\-CODE\s0. The PERL-CODE must be full perl program
with no spaces anywhere. Following variables are available during the
\&\fIeval()\fR of code:
.Sp
.Vb 2
\&    $ARG = current file name
\&    $url = complete url for the file
.Ve
.Sp
For example, if page contains links to .html file that are in fact
text files, this statement would store the filenames as .txt
.Sp
.Vb 1
\&    http://example.com/dir/ page:find pregexp:\e.html rename:s/html/txt/
.Ve
.IP "\fBregexp:REGEXP\fR" 4
.IX Item "regexp:REGEXP"
Get all files in ftp directory matching regexp. Directive \fBsave:\fR is ignored.
.IP "\fBregexp\-no:REGEXP\fR" 4
.IX Item "regexp-no:REGEXP"
After the regexp: directive has matched, explude files that match
directive \fBregexp\-no:\fR
.IP "\fBRegexp:REGEXP\fR" 4
.IX Item "Regexp:REGEXP"
This option is for interactive use. Retrieve all files from \s-1HTTP\s0 or \s-1FTP\s0
site which match \s-1REGEXP\s0.
.IP "\fBsave:LOCAL\-FILE\-NAME\fR" 4
.IX Item "save:LOCAL-FILE-NAME"
Save file under this name to local disk.
.IP "\fBtagN:NAME\fR" 4
.IX Item "tagN:NAME"
Downloads can be grouped under \f(CW\*(C`tagN\*(C'\fR so that e.g. option \fB\-\-Tag1\fR would
start downloading files from that point on until next \f(CW\*(C`tag1\*(C'\fR is found.
There are currently unlimited number of tag levels: tag1, tag2 and tag3, so
that you can arrange your downlods hierarchially in the configuration file.
For example to download all Linux files rhat you monitor, you would give
option \fB\-\-Tag linux\fR. To download only the \s-1NT\s0 Emacs latest binary, you
would give option \fB\-\-Tag emacs-nt\fR. Notice that you do not give the
\&\f(CW\*(C`level\*(C'\fR in the option, program will find it out from the configuration
file after the tag name matches.
.Sp
The downloading stops at next tag of the \f(CW\*(C`same level\*(C'\fR. That is, tag2 stops
only at next tag2, or when upper level tag is found (tag1) or or until end of
file.
.Sp
.Vb 1
\&    tag1: linux             # All Linux downlods under this category
.Ve
.Sp
.Vb 1
\&        tag2: sunsite    tag2: another-name-for-this-spot
.Ve
.Sp
.Vb 1
\&        #   List of files to download from here
.Ve
.Sp
.Vb 1
\&        tag2: ftp.funet.fi
.Ve
.Sp
.Vb 1
\&        #   List of files to download from here
.Ve
.Sp
.Vb 1
\&    tag1: emacs-binary
.Ve
.Sp
.Vb 1
\&        tag2: emacs-nt
.Ve
.Sp
.Vb 1
\&        tag2: xemacs-nt
.Ve
.Sp
.Vb 1
\&        tag2: emacs
.Ve
.Sp
.Vb 1
\&        tag2: xemacs
.Ve
.IP "\fBx:\fR" 4
.IX Item "x:"
Extract (unpack) file after download. See also option \fB\-\-unpack\fR and
\&\fB\-\-no\-extract\fR The archive file, say .tar.gz will be extracted the file in
current download location. (see directive \fBlcd:\fR)
.Sp
The unpack procedure checks the contents of the archive to see if
the package is correctly formed. The de facto archive format is
.Sp
.Vb 1
\&    package-N.NN.tar.gz
.Ve
.Sp
In the archive, all files are supposed to be stored under the proper
subdirectory with version information:
.Sp
.Vb 4
\&    package-N.NN/doc/README
\&    package-N.NN/doc/INSTALL
\&    package-N.NN/src/Makefile
\&    package-N.NN/src/some-code.java
.Ve
.Sp
\&\f(CW\*(C`IMPORTANT:\*(C'\fR If the archive does not have a subdirectory for all files, a
subdirectory is created and all items are unpacked under it. The defualt
subdirectory name in constructed from the archive name with currect date
stamp in format:
.Sp
.Vb 1
\&    package-YYYY.MMDD
.Ve
.Sp
If the archive name contains something that looks like a version number,
the created directory will be constructed from it, instead of current date.
.Sp
.Vb 1
\&    package-1.43.tar.gz    =>  package-1.43
.Ve
.IP "\fBxx:\fR" 4
.IX Item "xx:"
Like directive \fBx:\fR but extract the archive \f(CW\*(C`as is\*(C'\fR, without
checking content of the archive. If you know that it is ok for the archive
not to include any subdirectories, use this option to suppress creation
of an artificial root package\-YYYY.MMDD.
.IP "\fBxopt:rm\fR" 4
.IX Item "xopt:rm"
This options tells to remove any previous unpack directory.
.Sp
Sometimes the files in the archive are all read-only and unpacking the
archive second time, after some period of time, would display
.Sp
.Vb 2
\&    tar: package-3.9.5/.cvsignore: Could not create file: Permission denied
\&    tar: package-3.9.5/BUGS: Could not create file: Permission denied
.Ve
.Sp
This is not a serious error, because the archive was already on disk and
tar did not overwrite previous files. It might be good to inform the
archive maintainer, that the files have wrong permissions. It is customary
to expect that distributed kits have writable flag set for all files.
.SH "ERRORS"
.IX Header "ERRORS"
Here is list of possible error messages and how to deal with them.
Turning on  \fB\-\-debug\fR will help to understand how program has
interpreted your configuration file or command line options. Pay close
attention to the generated output, because it may rutn out that the mistake
is in too lose or tight regexp definitions in your side.
.IP "\fB\s-1ERROR\s0 {\s-1URL\-HERE\s0} Bad file descriptor\fR" 4
.IX Item "ERROR {URL-HERE} Bad file descriptor"
This is \*(L"file not found error\*(R". You have written the filename incorrectly.
Double check the configuration file line.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
Variable \f(CW\*(C`MYWEBGET_PL_CFG\*(C'\fR can point to the root configuration file in
which you can use \fBinclude\fR directives to read more configuration files.
The configuration file is read at startup if it exists.
.PP
.Vb 2
\&    export MYWEBGET_PL_CFG=$HOME/conf/mywebget.conf     # /bin/hash syntax
\&    setenv MYWEBGET_PL_CFG $HOME/conf/mywebget.conf     # /bin/csh syntax
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
C program \fIwget\fR\|(1) http://www.ccp14.ac.uk/mirror/wget.htm and
Old Perl 4 program \fImywebget\fR\|(1) http://www.wg.omron.co.jp/~jfriedl/perl/
From the the Libwww Perl library you find scripts
\&\fIlwp\-download\fR\|(1) \fIlwp\-mirror\fR\|(1) \fIlwp\-request\fR\|(1) \fIlwp\-rget\fR\|(1)
.PP
Win32 Cygwin unix utilities at http://www.cygwin.com/
.SH "AVAILABILITY"
.IX Header "AVAILABILITY"
Latest version of this file is at Project homepage at
http://perl\-webget.sourcefoge.net/
.PP
Reach author at \f(CW\*(C`jari.aalto@poboxes.com\*(C'\fR
.SH "SCRIPT CATEGORIES"
.IX Header "SCRIPT CATEGORIES"
CPAN/Administrative
CPAN/Web
.SH "PREREQUISITES"
.IX Header "PREREQUISITES"
\&\f(CW\*(C`LWP::UserAgent\*(C'\fR
\&\f(CW\*(C`Net::FTP\*(C'\fR
.SH "COREQUISITES"
.IX Header "COREQUISITES"
\&\f(CW\*(C`HTML::Parse\*(C'\fR
\&\f(CW\*(C`HTML::TextFormat\*(C'\fR
\&\f(CW\*(C`HTML::FormatText\*(C'\fR
.PP
These modules are dynamically loaded only if directive \fBcnv:text\fR
is used. Otherwise these modules are not loaded.
.PP
\&\f(CW\*(C`Crypt::SSLeay\*(C'\fR
This module is loaded only if \s-1HTTPS\s0 scheme is encountered.
.SH "OSNAMES"
.IX Header "OSNAMES"
\&\f(CW\*(C`any\*(C'\fR
.SH "VERSION"
.IX Header "VERSION"
$Id: mywebget.1,v 1.7 2003/06/08 12:22:48 jaalto Exp $
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright (C) 1996\-2002 Jari Aalto. All rights reserved. This program is
free software; you can redistribute it and/or modify it under the same
terms as Perl itself or in terms of Gnu General Public License v2 or later.
